<!DOCTYPE html>
<html>
    <head>
        <title>DataloggingWatertechniekTeunissen</title>
        <% include ../partials/head %>
    </head>
    <body>
        <% include ../partials/navbar %>
        <!-- Page start -->
        <div class="container" style="margin-top: 20px;" id="pageStart">
            <div class="row">
                <div class="col-12">
                    <h1>Start.</h1>
                    <p>Kies de juiste instellingen op het HMI, als u dit gedaan heeft, kan u onderstaande gegevens invullen en kan de machine starten.</p>
                    <form id="startRunForm" method="POST" action="">
                        <div class="form-row">
                            <div class="col-auto">
                                <div class="form-group">
                                    <label for="testName">Testnaam:</label>
                                    <input class="form-control" type="text" name="testName" placeholder="voorbeeld">
                                    <small class="form-text text-muted">Vul hier de naam/nummer van deze test in. Als u dit niet invult zal er een willekeurige naam aangemaakt worden.</small>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="form-group">
                                    <label for="clientName">Klantnaam:</label>
                                    <input class="form-control" type="text" name="clientName" placeholder="Watertechniek Teunissen">
                                    <small class="form-text text-muted">Vul hier de naam van de klant in. Als u dit niet invult zal dit veld leeg blijven.</small>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="form-group">
                                    <label for="pumpInfo">Pomp:</label>
                                    <input class="form-control" type="text" name="pumpInfo" placeholder="voorbeeld pomp">
                                    <small class="form-text text-muted">Vul hier de naam/gegevens van de pomp in. Als u dit niet invult zal dit veld leeg blijven.</small>
                                </div>
                            </div>
                        </div>
                        <button class="btn btn-success" type="submit">Start logging</button>
                    </form>
                </div>
            </div>
        </div>
        <!-- End page start -->
        <!-- Page working -->
        <!-- <div class="container" style="margin-top: 20px;" id="pageWorking">
            <div class="row">
                <div class="col-12">
                    <h1>Machine werkt...</h1>
                    <p>Even geduld alstublieft, de machine is nu een reeks testen aan het uitvoeren.</p>
                    <div class="progress">
                        <div class="progress-bar bg-success progress-bar-striped progress-bar-animated" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" style="width: 10%;">10%</div>
                    </div>
                    <p>Deze balk toont de voortgang van de machine, hier kan enige afwijking op zitten.</p>
                </div>
            </div>
        </div> -->
        <!-- End page working -->
        <!-- Page working -->
        <div class="container" style="margin-top: 20px;" id="pageWorking">
            <div class="row">
                <div class="col-12">
                    <h1></h1>
                    <p></p>
                    <span class="spinner-border text-info" role="status"></span>
                </div>
            </div>
        </div>
        <!-- End page working -->
        <!-- Error modal -->
        <div class="modal fade" role="dialog" tabindex="-1" id="modalError">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title text-danger">
                            <i class="fa fa-exclamation-triangle"></i>&nbsp;Fout</h4>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">Ã—</span>
                            </button>
                        </div>
                    <div class="modal-body">
                        <p>Er heeft zich een fout voorgedaan, gelieve de voorgaande actie opnieuw te proberen. Indien dit na enkele keren nog steeds niet lukt, contacteer dan de support.</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="button" onclick="closeErrorModal()">OK</button>
                    </div>
                </div>
            </div>
        </div>
        <!-- End error modal -->
        <% include ../partials/script %>
    </body>
    <script>
        const parsedUrl = new URL(window.location.href);
        const connUrl = `${parsedUrl.protocol}//${parsedUrl.host}`;
        const debug = parsedUrl.searchParams.get("debug") !== "true" ? false : true;
        const socket = new WebSocket("ws://" + parsedUrl.host);

        let data = {
            name: null,
            date: null,
            client: null,
            pump: null,
            data: null
        }

        let readingCount = 0;
        let id = 0;

        $("#pageStart").hide();
        $("#pageWorking").hide();

        socket.addEventListener("open", function (event) {
            debug ? console.debug(`WebSocket connected to ${event.currentTarget.url}`) : false;

            sendInstruction("machine.report_status");
        });

        socket.addEventListener("message", function(event) {
            const parsedJSON = JSON.parse(event.data);
            const instruction = parsedJSON.instruction;
            const data = parsedJSON.data;

            if (instruction !== undefined && data !== undefined) {
                instruction === "status" ? handleStatus(data) : false;
                instruction === "reading" ? handleReading(data) : false;
                instruction === "currentData" ? handleCurrentData(data) : false;
            }
        });

        const sendInstruction = (instruction, data) => {
            const body = JSON.stringify({
                instruction: instruction,
                data: data || ""
            });

            socket.send(body);
        };

        const handleStatus = (status) => {
            debug ? console.debug(`[WS] Status = ${status}`) : false;

            // Waiting for datalogging start.
            if (status === "AWAIT_PROGRAM_START") {
                $("#pageStart").show();
                $("#pageWorking").hide();
            }

            // Waiting for start.
            if (status === "AWAIT_PLC_START_CMD") {
                $("#pageStart").hide();
                $("#pageWorking").show();

                setWorkingContents("Wachten op machine start...", "De software is aan het wachten op een startcommando van de machine.");
            }

            // Machine has started, working now.
            if (status === "RUNNING") {
                $("#pageWorking").show();
                setWorkingContents("Machine in bedrijf...", "De software haalt nu realtime gegevens op van de machine, even geduld alstublieft.");
            }

            // Machine is finishing.
            if (status === "FINISHING") {
                $("#pageWorking").show();
                setWorkingContents("Machine is klaar.", "De software heeft een stopcommando ontvangen, deze run wordt nu verwerkt en opgeslagen. Even geduld alstublieft.");
                
                saveRun();
            }

            // Machine has finished.
            if (status === "FINISHED") {
                const referenceURL = new URL("/user/history/detail", parsedUrl);
                referenceURL.searchParams.set("id", id);

                sendInstruction("machine.reset");
                window.location.href = referenceURL;
            }

            // Machine errored.
            if (status === "ERRORED") {
                // Show dialog.
                $("#modalError").modal("show");

                // Reset machine.
                sendInstruction("machine.reset");
            }
        };

        const handleReading = (reading) => {
            debug ? console.debug(`[WS] Reading = ${JSON.stringify(reading)}`) : false;
            data.data.push([readingCount, reading.pressure, reading.flowrate]);
            readingCount += 1;
        };

        const handleCurrentData = (currData) => {
            data.data = currData;
        };

        const sleep = (milliseconds) => {
            return new Promise(resolve => setTimeout(resolve, milliseconds));
        };

        $("#startRunForm").on("submit", function (event) {
            event.preventDefault();

            debug ? console.debug("[USER] Start run form submitted.") : false;

            data.name = $("input[name=testName]").val();
            data.date = new Date();
            data.client = $("input[name=clientName]").val();
            data.pump = $("input[name=pumpInfo]").val();
            data.data = [];

            // Set status to waiting for start.
            sendInstruction("machine.start");
        });

        function setWorkingContents(status, text) {
            $("#pageWorking h1").fadeOut(150, function() {
                $(this).text(status).fadeIn(150);
            });

            $("#pageWorking p").fadeOut(150, function() {
                $(this).text(text).fadeIn(150);
            });
        }

        async function saveRun() {
            try {
                const itemResponse = await fetch(`${connUrl}/api/history`, {
                    method: "POST",
                    mode: "cors",
                    cache: "no-cache",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(data)
                });
                const itemJSON = await itemResponse.json();

                debug ? console.log(itemJSON) : false;

                id = itemJSON.data[0].id;

                sendInstruction("data.saved", { id: id });
            } catch (err) {
                console.error(err);
            }
        }

        function closeErrorModal() {
            $("#modalError").modal("hide");
        }

        $(document).ready(() => {
            sendInstruction("data.getCurrent");
        });
    </script>
</html>